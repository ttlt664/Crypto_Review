#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# @Time    : 2023/10/21 14:05
from sage.all import *
from Crypto.Util.number import *

c1 = [908996880816674413953945844149350915331956247471480600840221415119794882139724,
      971918808384910355828135603762747020183688585728289421786279444571287619529246,
      1285550352531583269956802123237391199017403081800977678246201935580429758051904,
      1551774945769448705387900437472951015954157193946719575845523359198154668857591,
      676185408751480221545400062950292727848016906516506232986883519673765317932582,
      1250300209784131850574858927023046353058343552115735540789593580037130054384362,
      1298409778422699298367007023890818793557023853717180295526932023194697263501748,
      1332552452292482549702793642987623159617988974910321945878093492007278710993114,
      1030239404875082841481045525469865919289388171602293245905162820968158543176773,
      1154148024180033719999293176590867264297899817449945744942661351655533433871621]
c2 = [584297112520340495757457954416165393828472756298945167299482077258411155766756,
      886432149227960827335266910774569034430464592640209168563805700117347063152246,
      613528590036968449893421430816319461615130635882647544978722093413694101540550,
      576162106332135829961234799085370038425761945928004579456101802617485243023987,
      627570890346195626159365118862437334953500165050236216404858019114288681512171,
      1015503424232985454098149884321288932492551183126601131968495641510550575005042,
      1532737675157046782602115678180407262847166210963507805526455422934164759886583,
      1540047002602145805476906585925538790245968214992837106009502002588479779602195,
      505097517314409449404205152068185149808364887623922221197462411159844816865696,
      873498218680784138428154510303205366133389839886911286745954821800632158315951]


class CB_curve:
    def __init__(self):
        self.p = 1141741939958844590498346884870015122543626602665954681008204697160652371664923
        self.a = 727131475903635498678013730344448225340496007388151739960305539398192321065043
        self.b = 840714623434321649308065401328602364673881568379142278640950034404861312007307

    def add(self, P, Q):
        if P == -1:
            return Q
        (x1, y1) = P
        (x2, y2) = Q
        x3 = (x1 + x2) * (1 + self.a * y1 * y2) * inverse((1 + self.b * x1 * x2) * (1 - self.a * y1 * y2),
                                                          self.p) % self.p
        y3 = (y1 + y2) * (1 + self.b * x1 * x2) * inverse((1 - self.b * x1 * x2) * (1 + self.a * y1 * y2),
                                                          self.p) % self.p
        return (x3, y3)

    def mul(self, x, P):
        Q = -1
        while x > 0:
            if x & 1:
                Q = self.add(Q, P)
            P = self.add(P, P)
            x = x >> 1
        return Q

    def negG(self, G):
        return self.mul(order - 1, G)


def mapping_from_Huff_to_Weierstrass(point, ecc):
    a = ecc.a
    b = ecc.b
    p = ecc.p
    x, y = point
    x, y = (b * x - a * y) * inverse(y - x, p) % p, (b - a) * inverse(y - x, p) % p
    point = x, y
    return point


ecc = CB_curve()
G = (586066762126624229327260483658353973556531595840920560414263113786807168248797,
     66727759687879628160487324122999265926655929132333860726404158613654375336028)
Q = (460843895959181097343292934009653542386784127282375019764638432240505304648101,
     739422832583403823403837831802136107593509589942947902014204968923412689379907)
q_x = []
for i in range(10):
    q_x.append(ecc.mul(10 - i, Q))
# print(q_x)
PR = PolynomialRing(Zmod(ecc.p), names=['x', 'y', 'es'])
x, y, es = PR.gens()
Gf = []
for i in range(10):
    # 根据huff曲线的加法倒过来推
    f = (c2[i] - es) * (1 + ecc.b * q_x[i][0] * x) * (1 - ecc.a * q_x[i][1] * y) - (x + q_x[i][0]) * (
            1 + ecc.a * y * q_x[i][1])
    Gf.append(f)
res = Ideal(Gf).groebner_basis()
print(res)

xp = ecc.p - 239643535167901657800210470774814532510308869595840873642845564328410464397042
# yp = ecc.p - 146109242247186884695587727086539555907710369392694609972293964300672819401615
# e = ecc.p - 716700711017198421972376297958894204723153539777056104579499803899129208364755
# print(xp)
# 这里一开始忘了 y并不在曲线上
Pq = PolynomialRing(GF(ecc.p), name='yp')
yp = Pq.gen()
fx = (ecc.a * yp ** 2 - 1) * xp -  yp * (ecc.b * xp ** 2 - 1)
fx = fx.monic()
res = fx.roots()
print(res)

E = EllipticCurve(GF(ecc.p), [0, ecc.a + ecc.b, 0, ecc.a * ecc.b, 0])
print(ecm.factor(E.order()))
# yp =
# print(yp)
yp = 672929595307990944197873882889709005621738844588134711458648048321447534353147
logs = []
primes = [ 3, 5, 37, 271, 4297, 6983, 9679, 52631, 139571, 84666937, 558977989]
P = (xp, yp)
P = E(mapping_from_Huff_to_Weierstrass(P, ecc))
G = E(mapping_from_Huff_to_Weierstrass(G, ecc))
for fac in primes:
    t = int(E.order()) // int(fac)
    log = discrete_log(t * P, t * G, operation='+')
    logs += [log]
m = crt(logs, primes)
print(long_to_bytes(m))
