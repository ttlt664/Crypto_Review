from Crypto.Util.number import *
from secret import flag
import hashlib

a = 147
b = 94
p = 2^a*3^b - 1
assert p in Primes()
K.<i> = GF(p^2, modulus=x^2+1)
E = EllipticCurve(K, [0,6,2,1,-1])

Pa = E(0)
while (2^(a-1))*Pa == 0:
    Pa = 3^b * E.random_point()
Qa = Pa
while Pa.weil_pairing(Qa, 2^a)^(2^(a-1)) == 1:
    Qa = 3^b * E.random_point()
Pb = E(0)
while (3^(b-1))*Pb == 0:
    Pb = 2^a * E.random_point()
Qb = Pb
while Pb.weil_pairing(Qb, 3^b)^(3^(b-1)) == 1:
    Qb = 2^a * E.random_point()
print(Pa,Qa,Pb,Qb)

S = randint(0, 2^a-1)
R = Pa + S * Qa
phi = E.isogeny(R, algorithm='factored')
Ea, phiPb, phiQb = phi.codomain(), phi(Pb), phi(Qb)
print(phiPb,phiQb)
T = randint(0, 3^b-1)
R = Pb + T * Qb
psi = E.isogeny(R, algorithm='factored')
Eb, psiPa, psiQa = psi.codomain(), psi(Pa), psi(Qa)
print(psiPa,psiQa)

enc=bytes_to_long(hashlib.sha512(b'%d-%d'%(S,T)).digest())^^bytes_to_long(flag)
print(enc)

'''
(40074548293223440291801232443149509089891981229124559736407059103043868336708867317026985*i + 122799449573563489920720950132660860900096822047322731796528151264630348711997247891530909 : 71252454102788092638007853755983188215504851961546665517417319869609805244911564866037298*i + 96566070763297702267309246446515287797799562905901332335990258978182383999173930672812804 : 1) (90350530158964427854367296942787944583971508065240379024583702667987370700446588249015598*i + 100200091034197595801180891574776291081875584385871907890926563206949200975176143383370498 : 71236607708180465608990033981450275148794018299421447668296294741063831960761742257524263*i + 18310326102191902052430924597918272083026556742555749117041474296293821837294883672379954 : 1) (64936341842981955847116044068450516485760288809873230789881393577311711258635718072105641*i + 120468569659864242534553874341764756096627611025123369190227540512068241810126989860005560 : 65319031933105124157869367914226526329115786772383264959667460934146935674946336921636331*i + 43531678835933433755155003147030576333902831498921076513978705610153922035618835478480699 : 1) (106474967609603471495888676475134181794435214116861199360095564223073891988254271115054028*i + 24662450813232267201155015560123623195723252593929557424201951833305503138665553706386519 : 83376200920834812513015680942296661220198033622473028115815844636791609530547696135583859*i + 110944522827295042122624060994997420171276676047165708695199226173752071091899059535497221 : 1)
(79159271912191145013766052303645991106019219994229135658466667093512116650162208572029148*i + 15959833599661918456301970242100171933952039666511344738977578944760207608845679833429606 : 121455868371001428363187233049064353356841471658126499166069378702784746312220325675606413*i + 57942353698034023864467609543362981685991124262596153617839479352596580066411562906701269 : 1) (83454117313798996963952870634863579218312897221839224609002453002257274277600346953738834*i + 75044379983502296441104155991953334761565730520464082810501928548734245294339082713564484 : 110460590853431189929658377091257668536592631141196553718806687225530724199997834265731049*i + 38477444975873328428114724005483995738273530589015239298850610966338924157843605591886018 : 1)
(19622957034538818953616975070762958431051067074614685700867953903150535083131060948194819*i + 62376203380945211033710851172175665893385995194581199689870290585171811634036699252096434 : 14826589031514012650396328048876996111591350184956308891994878441710355846468567782845327*i + 107106182418115535739151634851922514959609673334932750121373674898070912230137922344567710 : 1) (68282885882705741876779323212543115411851901934103078316255764636325645298264026870872650*i + 123039177364419101340994419127489697683172203558022398679642279319822143355233975884205840 : 15134629772629392371513727483974930590867138038750058183906668696303387252868708477749725*i + 108144178229437691074289482602539162535809700390662808896418269949589227804596623658412107 : 1)
7192557365063643937651616893121316959887525650360194310117498977989776087212732201931555761137273629981360636623944179830526266471911916044790138581227368
'''